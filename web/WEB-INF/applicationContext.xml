<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 导入属性文件01-->
    <!--    <context:property-placeholder location="classpath:jdbc.properties"/>-->
    <!-- 导入属性文件02-->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="2" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="location">
            <value>classpath:jdbc.properties</value>
        </property>
        <property name="fileEncoding">
            <value>UTF-8</value>
        </property>
    </bean>
    <!--密码-->
    <bean id="password" class="utility.BASE64">
        <property name="message" value="${jdbc.asskey}"/>
    </bean>
    <!--数据源配置-->
    <bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="defaultAutoCommit" value="false"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="#{password.message}"/>
        <property name="initialSize" value="1"/>
        <property name="maxActive" value="2"/>
    </bean>

    <!--会话工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="basicDataSource"/>
    </bean>

    <!--配置DAO扫描包，以及依赖的SQLSession工厂-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sina.map"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!--配置事务管理器-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="basicDataSource"/>
    </bean>
    <!-- 事务代理工厂 -->
    <context:component-scan base-package="com.sina.service"/>
    <!-- 一、生成事务代理对象，第一种方式 注意要将该代理对象注入到应用中而不是目标对象-->
<!--    <bean id="serviceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">-->
<!--        <property name="transactionManager" ref="dataSourceTransactionManager"/>-->
<!--        <property name="target" ref="courseService"/>-->
<!--        &lt;!&ndash; 此属性指定目标类本省是否是代理的对象.如果目标类没有实现任何类，就设为true代表自己 &ndash;&gt;-->
<!--        <property name="proxyTargetClass" value="false"/>-->
<!--        <property name="transactionAttributes">-->
<!--            <props>-->
<!--                <prop key="transaction*">PROPAGATION_REQUIRED,-Exception</prop>-->
<!--                &lt;!&ndash; 主要 key 是方法-->
<!--                    ISOLATION_DEFAULT  事务的隔离级别-->
<!--                    PROPAGATION_REQUIRED  传播行为-->
<!--                &ndash;&gt;-->
<!--                &lt;!&ndash; -Exception 表示发生指定异常回滚，+Exception 表示发生指定异常提交 &ndash;&gt;-->
<!--                <prop key="save*">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>-->
<!--                <prop key="insert*">ISOLATION_DEFAULT,PROPAGATION_REQUIRED,+Exception</prop>-->
<!--                <prop key="update*">ISOLATION_DEFAULT,PROPAGATION_REQUIRED</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->

    <!--二、用TX命名空间声明事务，第二种方式-->
<!--    <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">-->
<!--        <tx:attributes>-->
<!--            <tx:method name="save*" propagation="REQUIRED"/>-->
<!--            <tx:method name="insert*" propagation="REQUIRED"/>-->
<!--            <tx:method name="update*" propagation="REQUIRED"/>-->
<!--            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="servicePointCut" expression="execution(* com.sina.service..*.*(..))"/>-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointCut"/>-->
<!--    </aop:config>-->
    <!--三、用TX命名空间声明事务，第二种方式驱动注解方式-->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>


    <!--配置AOP代理模式proxy-target-class：false-基于接口，使用JDK动态代理；true-基于类，需要使用cglib库 -->
    <aop:aspectj-autoproxy/>
    <!--配置切面日志类 execution(* com.spring.service..*.businessService())-->
    <bean id="controllerAspect" class="com.sina.aspect.ControllerAspect"/>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="controllerpoint" expression="execution(* com.sina.controller..*.*(..))"/>
        <!--        <aop:aspect ref="controllerAspect">-->
        <!--            <aop:before method="beforeInfo" pointcut-ref="controllerpoint"/>-->
        <!--        </aop:aspect>-->
        <!--<aop:aspect ref="controllerAspect">-->
        <!--<aop:after method="afterInfo" pointcut="execution( * main.java.com.sina.controller..*.test(..))"/>-->
        <!--</aop:aspect>-->
        <!--<aop:aspect ref="controllerAspect">-->
        <!--<aop:after-returning method="retrunInfo" pointcut="execution( * main.java.com.sina.controller..*.test(..))"/>-->
        <!--</aop:aspect>-->
        <!--<aop:aspect ref="controllerAspect">-->
        <!--<aop:after-throwing method="throwInfo" pointcut="execution( * main.java.com.sina.controller..*.test(..))"/>-->
        <!--</aop:aspect>-->
        <aop:aspect ref="controllerAspect">
            <aop:around method="aroundInfo" pointcut-ref="controllerpoint"/>
        </aop:aspect>
    </aop:config>
</beans>